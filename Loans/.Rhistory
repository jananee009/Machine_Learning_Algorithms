loanData.clean$zip_code <- NULL
loanData.clean$mths_since_last_delinq = NULL
summary(loanData.clean)
which(!complete.cases(loanData.clean[,1]))
loanData.clean[39787,]
loanData.clean <- loanData.clean[-39787,]
summary(loanData.clean)
head(loanData.clean[,"home_ownership"])
write.csv(loanData, "loanData.csv")
unique(loanData.clean[,"home_ownership"])
loanData.clean$home_ownership <- as.factor(loanData.clean$home_ownership)
unique(loanData.clean[,"is_inc_v"])
loanData.clean$is_inc_v <- as.factor(loanData.clean$is_inc_v)
unique(loanData.clean[,"policy_code"])
loanData.clean$policy_code = NULL
unique(loanData.clean[,"initial_list_status"])
unique(loanData.clean[,"pymnt_plan"])
loanData.clean$pymnt_plan <- as.factor(loanData.clean$pymnt_plan)
loanData.clean$initial_list_status = NULL
summary(loanData.clean)
unique(loanData.clean[,"loan_status"])
summary(loanData.clean)
nrow(complete.cases(loanData.clean))
nrow(loanData.clean[complete.cases(loanData.clean),])
nrow(loanData.clean)
apply(loanData.clean, 1, function(x) sum(is.na(x)))
?manyNAs()
manyNAs(loanData.clean)
manyNAs(loanData.clean,0.2)
which(!complete.cases(loanData.clean))
loanData.clean[39699,]
a = which(!complete.cases(x))
a
a = which(!complete.cases(loanData.clean))
a
type(a)
class(a)
sapply?
;
?sapply
a =as.vector(a)
b = sapply(a,function(x) sum(is.na(x)))
b = as.vector(b)
output = a + b
output
b
b = apply(a,1,function(x) sum(is.na(x)))
incompletecaseNumbers = which(!complete.cases(loanData.clean))
incompletecaseNumbers =as.vector(incompletecaseNumbers)
incompletecases = loanData.clean[incompletecaseNumbers,]
b = apply(incompletecases,1,function(x) sum(is.na(x)))
b
loanData.clean[39699,]
loanData.clean[39712,]
getMissingValues = function(x){
incompletecaseNumbers = which(!complete.cases(x)) # gives the row numbers of all the incomplete cases in the dataframe
incompletecaseNumbers =as.vector(incompletecaseNumbers)
incompletecases = x[incompletecaseNumbers,]
missingValuesCount = sapply(incompletecases,function(x) sum(is.na(x)))
return missingValuesCount
}
getMissingValues = function(x){
incompletecaseNumbers = which(!complete.cases(x))
incompletecaseNumbers =as.vector(incompletecaseNumbers)
incompletecases = x[incompletecaseNumbers,]
missingValuesCount = apply(incompletecases,1,function(x) sum(is.na(x)))
return missingValuesCount
}
getMissingValues = function(x){
incompletecaseNumbers = which(!complete.cases(x))
incompletecaseNumbers =as.vector(incompletecaseNumbers)
incompletecases = x[incompletecaseNumbers,]
missingValuesCount = apply(incompletecases,1,function(x) sum(is.na(x)))
return missingValuesCount }
getMissingValues = function(x){
incompletecaseNumbers = which(!complete.cases(x))
incompletecaseNumbers =as.vector(incompletecaseNumbers)
incompletecases = x[incompletecaseNumbers,]
missingValuesCount = apply(incompletecases,1,function(x) sum(is.na(x)))
return missingValuesCount }
getMissingValues = function(x){
incompletecaseNumbers = which(!complete.cases(x))
incompletecaseNumbers =as.vector(incompletecaseNumbers)
incompletecases = x[incompletecaseNumbers,]
missingValuesCount = apply(  incompletecases,1,function(x) sum(is.na(x))   )
return (missingValuesCount)
}
missingVal = getMissingValues(loanData.clean)
missingVal
dim(missingVal)
class(missingVal)
missingVal = as.vector(missingVal)
dim(missingVal)
missingVal = as.matrix(missingVal)
dim(missingVal)
missingVal[1,]
missingVal
missingVal = getMissingValues(loanData.clean)
missingVal
incompletecaseNumbers = which(!complete.cases(loanData.clean))
incompletecaseNumbers
incompletecaseNumbers =as.vector(incompletecaseNumbers)
incompletecases = x[incompletecaseNumbers,]
incompletecases = loanData.clean[incompletecaseNumbers,]
missingValuesCount = apply(  incompletecases,1,function(y) sum(is.na(y))   )
incompleteCaseCountdf =  data.frame(incompletecaseNumbers,missingValuesCount)
dim(incompleteCaseCountdf)
head(incompleteCaseCountdf)
incompleteCaseCountdf[order(-missingValuesCount)]
incompleteCaseCountdf[order(-missingValuesCount),]
incompleteCaseCountdfSorted =  incompleteCaseCountdf[order(-missingValuesCount)]
incompleteCaseCountdfSorted =  incompleteCaseCountdf[order(-missingValuesCount),]
dim(incompleteCaseCountdfSorted)
head(incompleteCaseCountdfSorted)
head(incompleteCaseCountdf)
incompletecaseNumbers
missingValuesCount = as.vector(missingValuesCount)
incompleteCaseCountdf =  data.frame(incompletecaseNumbers,missingValuesCount)
head(incompleteCaseCountdf)
incompleteCaseCountdf[order(-missingValuesCount)]
head(incompleteCaseCountdf[order(-missingValuesCount),])
getMissingValues = function(x){
incompletecaseNumbers = which(!complete.cases(x))
incompletecaseNumbers =as.vector(incompletecaseNumbers)
incompletecases = x[incompletecaseNumbers,]
missingValuesCount = apply(  incompletecases,1,function(y) sum(is.na(y))   )
missingValuesCount = as.vector(missingValuesCount)
incompleteCaseCountdf =  data.frame(incompletecaseNumbers,missingValuesCount)
incompleteCaseCountdfSorted =  incompleteCaseCountdf[order(-missingValuesCount),]
return (incompleteCaseCountdfSorted)
}
missingVal = getMissingValues(loanData.clean)
missingVal
head(missingVal)
loanData.clean = loanData.clean[-c(missingVal$incompletecaseNumbers),]
nrow(missingVal)
nrow(loanData.clean)
unique(loanData.clean[,"loan_status"])
?subset
loanData.clean.subset = loanData.clean[grep("Does not meet the credit policy.", loanData.clean$loan_Status), ]
head(loanData.clean.subset)
loanData.clean.subset
pmatch("med", c("mean", "median", "mode"))
a = pmatch("Does not meet the credit policy",loanData.clean$loan_status)
a
pmatch("Does not meet the credit policy",loanData.clean$loan_status)
bad_indicators <- c("Late (16-30 days)", "Late (31-120 days)", "Default", "Charged Off")
?pmatch()
a = pmatch("Does not meet the credit policy",as.vector(loanData.clean$loan_status))
a
Months = data.frame(Name = month.name, Number = 1:12)
Months
Months[grep("mb",Name)]
Months[grep("mb",Months$Name)]
Months[grep("mb",Months$Name), ]
Months[grep("mb",Name), ]
Months[grep("mb",Months$Name), ]
loanData.clean[grep("Does not meet the credit policy",loanData.clean$loan_status),]
head(loanData.clean[grep("Does not meet the credit policy",loanData.clean$loan_status),])
ambiguousLoanStatusRecords = loanData.clean[grep("Does not meet the credit policy",loanData.clean$loan_status),]
unique(loanData.clean[,"loan_status"])
nrow(ambiguousLoanStatusRecords)
head(ambiguousLoanStatusRecords)
temp = loanData.clean[-ambiguousLoanStatusRecords,]
subset(loanData.clean,grep("Does not meet the credit policy",loanData.clean$loan_status) )
temp = ,grep("Does not meet the credit policy",loanData.clean$loan_status) )
Error in s
temp = loanData.clean
nrow(temp)
temp1 = temp[!ambiguousLoanStatusRecords]
temp1 = temp[!ambiguousLoanStatusRecords,]
temp1 = temp - ambiguousLoanStatusRecords
?with()
temp[!temp %in% ambiguousLoanStatusRecords,]
nrow(temp)
temp1 = temp[!temp %in% ambiguousLoanStatusRecords,]
nrow(ambiguousLoanStatusRecords)
42390 - 2660
nrow(temp)
nrow(temp1)
temp1 = temp[!ambiguousLoanStatusRecords %in% temp,]
nrow(temp1)
ncol(temp1)
ncol(ambiguousLoanStatusRecords)
temp1 = temp[-grep("Does not meet the credit policy",temp$loan_status),]
nrow(temp1)
loanData.clean = loanData.clean[-grep("Does not meet the credit policy",loanData.clean$loan_status),]
nrow( loanData.clean)
summary(loanData.clean)
loanData.clean$purpose = NULL
summary(loanData.clean)
unique(loanData$loan_status)
unique(loanData.clean$loan_status)
bad_indicators <- c("Late (16-30 days)", "Late (31-120 days)", "Default", "Charged Off")
loanData.clean$is_bad = ifelse(loanData.clean$loan_status %in% bad_indicators,1,0)
head(loanData.clean)
str_replace_all(83.7%, "[%]", "")
str_replace_all("83.7%", "[%]", "")
str_replace("83.7%", "[%]", "")
library(stringr)
str_replace_all(83.7%, "[%]", "")
str_replace("83.7%", "[%]", "")
loanData.clean$issue_d <- as.Date(loanData.clean$issue_d)
unique(oanData.clean$issue_d)
unique(loanData.clean$issue_d)
loanData.clean$issue_d = as.Date(loanData.clean$issue_d)
which(!complete.cases(loanData.clean$issue_d))
which(!complete.cases(,loanData.clean$issue_d))
as.Date("Dec-2011")
type("Dec-2011")
class("Dec-2011")
?as.Date
library(lubridate)
package("lubridate")
install.packages("lubridate")
package("lubridate")
library(lubridate)
loanData.clean$issue_d = as.Date(loanData.clean$issue_d)
?lubridate
loanData.clean$issue_d <- as.Date(loanData.clean$issue_d)
loanData.clean$earliest_cr_line <- as.Date(loanData.clean$earliest_cr_line)
library("mlogit")
library(mlogit)
install.packages("mlogit")
library(mlogit)
library(car)
getwd()
setwd("/Users/jananee009/Zananee/Books/R/DiscoveringStatsUsingR")
eelData = read.delim("eel.dat",header=TRUE)
head(eelData)
summary(eelData)
eelData$Cured = relevel(eelData$Cured, "Not Cured")
?relevel
eelData$Intervention = relevel(eelData$Intervention, "No Treatment")
eelModel.1 = glm(Cured ~ Intervention,data=eelData,family=binomial())
?glm()
eelModel.2 = glm(Cured~.,data=eelData,family=binomial())
summary(eelModel.1)
modelChi = eelModel.1$null.deviance - eelModel.1$deviance
modelChi
eelModel.1$df.null
chidf = eelModel.1$df.null - eelModel.1$df.residual
chidf
?pchisq()
chisq.prob = 1-pchisq(modelChi,chidf)
chisq.prob
eelModel.1$coefficients
exp(eelModel.1$coefficients)
?exp
?confint()
exp(confint(eelModel.1))
eelModel.2
summary(eelModel.2)
anova(eelModel.1,eelModel.2)
modelChi = eelModel.1$deviance - eelModel.2$deviance
chidf = eelModel.1$df.residual - eelModel.2$df.residual
album2 = read.delim("Album Sales 2.dat",h=T)
albumSales.2 = lm(sales~adverts,data=album2)
head(album2)
albumSales.3 = lm(sales~.,data=album2)
summary(albumSales.3)
head(albumSales2)
head(album2)
eelData$predicted.probabilities = fitted(eelModel.1)
eelModel.1
summary(eelModel.1)
head(eelData)
eelData$residuals = resid(eelModel.1)
head(eelData)
summary(eelModel.1)
penaltyData = read.delim("penalty.dat",h=T)
head(penaltyData)
summary(penaltyData)
penaltyModel.1 = glm(Scored~PSWQ, data=penaltyData,family=binomial() )
penaltyModel.2 = glm(Scored~PSWQ+Previous, data=penaltyData,family=binomial() )
penaltyModel.3 = glm(Scored~PSWQ+Previous+Anxious, data=penaltyData,family=binomial() )
vif(penaltyModel.3)
summary(penaltyModel.2 )
summary(penaltyModel.3 )
cor(penaltyData[,c("Previous","PSWQ","Anxious")])
head(penaltyData)
penaltyData$logPSWQ = log(penaltyData$PSWQ)*penaltyData$PSWQ
penaltyData$logAnxious = log(penaltyData$Anxious)*penaltyData$Anxious
penaltyData$logPrevious = log(penaltyData$Previous+1)*penaltyData$Previous
penaltyData
head(penaltyData)
penaltyTest.1 = glm(Scored~.,data=penaltyData,family=binomial())
summary(penaltyTest.1)
chatData = read.delim("Chat-Up Lines.dat",h=T)
chatData = read.delim("Chat-Up Lines.dat",h=T)
head(chatData)
str(chatData)
summary(chatData)
is.factor(chatData$Gender)
chatData$Gender = relevel(chatData$Gender,"Male")
str(chatData)
mlChat = mlogit.data(chatData,choice="Success",shape="wide")
head(mlChat)
head(chatData)
chatModel = mlogit(Success ~ 1 | Good_Mate+Funny+Gender+Sex+Gender:Sex+Funny:Gender,data=mlChat,reflevel=3)
summary(chatModel)
burnoutData = read.delim("Burnout.dat",h=T)
burnoutData = read.delim("Burnout.dat",h=T)
head(burnoutData)
summary(burnoutData)
burnoutModel.1 = glm(burnout~`1,data=burnoutData,family=binomial())
;
)
fsdfsdfsdf
burnoutModel.1 = glm(burnout~1,data=burnoutData,family=binomial())
summary(burnoutModel.1)
burnoutData$burnout<-relevel(burnoutData$burnout, "Not Burnt Out")
head(burnoutData)
burnoutModel.1 = glm(burnout~loc+cope,data=burnoutData,family=binomial())
burnoutModel.2 = glm(burnout~loc+cope+teaching+research+pastoral,data=burnoutData,family=binomial())
summary(burnoutModel.1)
summary(burnoutModel.2)
modelChi = burnoutModel.1$null.deviance - burnoutModel.1$deviance
chidf = burnoutModel.1$df.null - burnoutModel.1$df.residual
chisq.prob = 1-pchisq(modelChi,chidf)
modelChi;chidf;chisq.prob
exp(burnoutModel.1$coefficients)
condomData = read.delim("condom.dat",h=T)
head(condomData)
summary(condomData)
str(condomData)
condomData$use = relevel(condomData$use,"Unprotected")
condomData$gender = relevel(condomData$gender,"Male")
condomData$previous = relevel(condomData$previous,"No Condom")
condomModel.1 = glm(use~gender+safety+perceive)
condomModel.1 = glm(use~gender+safety+perceive,data=condomData,family=binomial())
condomModel.2 = glm(use~.,data=condomData,family=binomial())
summary(condomModel.1)
summary(condomModel.2)
vif(condomModel.2)
getwd()
spiderWide = read.delim("SpiderWide.dat",h=T)
head(spiderWide)
spiderWide$pMean = mean(spiderWide$picture, spiderWide$real)
spiderWide$pMean =  (spiderWide$picture + spiderWide$real)/2
grandMean = mean(c(spiderWide$picture,spiderWide$real))
grandMean
spiderWide
spiderWide$adj = grandMean - spiderWide$pMean
spiderWide
spiderWide$picture_adj = spiderWide$picture - spiderWide$adj
spiderWide$real_adj = spiderWide$real - spiderWide$adj
spiderWide
chickFlick = read.delim("chickFlick.dat",h=T)
head(chickFlick)
bar = ggplot(chickFlick, aes(film,arousal))
library(ggplot)
library(ggplot2)
bar = ggplot(chickFlick, aes(film,arousal))
bar + stat_summary(fun.y=mean, geom="bar", fill="White", colour="Black")
bar + stat_summary(fun.y=mean, geom="bar", fill="White", colour="Black") + stat_summary(fun.data=mean_cl_normal,geom="pointrange") + labs(x="Film", y="Mean Arousal")
bar + stat_summary(fun.y=mean, geom="errorbar", fill="White", colour="Red") + stat_summary(fun.data=mean_cl_normal,geom="pointrange") + labs(x="Film", y="Mean Arousal")
bar = ggplot(chickFlick, aes(film,arousal,fill=gender))
bar+stat_summary(fun.y=mean, geom="bar", position = dodge)
bar+stat_summary(fun.y=mean, geom="bar", position = "dodge")
bar+stat_summary(fun.y=mean, geom="bar", position = "dodge")+ stat_summary(fun.data=mean_cl_normal, geom="errorbar", position=position_dodge(width=0.9),width=0.2)
chickFlick
summary(chickFlick)
chickFlick[,film="Memento"]
chickFlick[,chickFlick$film="Memento"]
chickFlick[chickFlick$film="Memento",]
chickFlick[chickFlick$film=="Memento",]
chickFlick[chickFlick$film=="Memento",chickFlick$arousal]
chickFlick[chickFlick$film=="Memento",'arousal']
mementoMean = mean(chickFlick[chickFlick$film=="Memento",'arousal'])
bjdMean = mean(chickFlick[chickFlick$film=="Bridget Jones' Diary",'arousal'])
mementoMean
bjdMean
?sd()
Mementosd = sd(chickFlick[chickFlick$film=="Memento",'arousal'])
mementoSD = sd(chickFlick[chickFlick$film=="Memento",'arousal'])
bjdSD = sd(chickFlick[chickFlick$film=="Bridget Jones' Diary",'arousal'])
mementoSE = mementoSD/sqrt(20)
bjdSE = bjdSD/sqrt(20)
mementoCI = mementoMean + (1.96*mementoSE)
mementoCI
mementoCIUL = mementoMean + (1.96*mementoSE)
mementoCILL = mementoMean - (1.96*mementoSE)
mementoCILL
chickFlick[chickFlick$film=="Memento",chickFlick$gender=="Male",'arousal'])
chickFlick[chickFlick$film=="Memento",chickFlick$gender=="Male",'arousal']
chickFlick[chickFlick$film=="Memento" & chickFlick$gender=="Male",'arousal']
mementoMaleMean = mean(chickFlick[chickFlick$film=="Memento" & chickFlick$gender=="Male",'arousal'])
mementoMaleSD = sd(chickFlick[chickFlick$film=="Memento" & chickFlick$gender=="Male",'arousal'])
mementoMaleSE = mementoMaleSD / sqrt(10)
mementoMaleCIUL = mementoMaleMean + (1.96*mementoMaleSE)
mementoMaleCIUL
mementoMaleCILL = mementoMaleMean - (1.96*mementoMaleSE)
mementoMaleCILL
mementoMaleMean
spiderLong = read.delim("spiderLong.dat",h=T)
head(spiderLong)
ind.t.test = t.test(Anxiety~Group,data=spiderLong,paired=FALSE)
ind.t.test
library(WRS)
install.packages("WRS")
install.packages("WRS",repos="http://R-Forge.R-Project.org")
install.packages("WRS",repos="http://R-Forge.R-project.org")
install.packages("WRS",repos="http://r-forge.r-project.org/")
?se()
spiderWide
sd(spiderWide$picture)/sqrt(12)
viagra = read.delim("Viagra.dat",h=T)
head(viagra)
summary(viagra)
sd(viagra$libido)
sd(viagra$libido)^2
setwd("/Users/jananee009/Zananee/Projects/mlalgorithms/Loans")
source('~/.active-rstudio-document')
loanData.clean$grade <- as.factor(loanData.clean$grade)
loanData.clean$sub_grade <- as.factor(loanData.clean$sub_grade)
loanData.clean$home_ownership <- as.factor(loanData.clean$home_ownership)
loanData.clean$is_inc_v <- as.factor(loanData.clean$is_inc_v)
loanData.clean$pymnt_plan <- as.factor(loanData.clean$pymnt_plan)
loanData.clean$term = as.factor(loanData.clean$term)
loanData.clean$emp_length = as.factor(loanData.clean$emp_length)
unique( loanData.clean$emp_length)
loanData.clean$emp_length = relevel(loanData.clean$emp_length,"< 1 year")
loanData.clean$addr_state = as.factor(loanData.clean$addr_state)
summary(loanData.clean)
getMissingValues = function(x){
incompletecaseNumbers = which(!complete.cases(x))
incompletecaseNumbers =as.vector(incompletecaseNumbers)
incompletecases = x[incompletecaseNumbers,]
missingValuesCount = apply(  incompletecases,1,function(y) sum(is.na(y))   )
missingValuesCount = as.vector(missingValuesCount)
incompleteCaseCountdf =  data.frame(incompletecaseNumbers,missingValuesCount)
incompleteCaseCountdfSorted =  incompleteCaseCountdf[order(-missingValuesCount),]
return (incompleteCaseCountdfSorted)
}
missingVal = getMissingValues(loanData.clean)
missingVal
bad_indicators = c("Late (16-30 days)", "Late (31-120 days)", "Default", "Charged Off")
loanData.clean$is_bad = ifelse(loanData.clean$loan_status %in% bad_indicators,1,0)
loanData.clean$is_bad = as.factor(loanData.clean$is_bad)
loanData.clean$is_bad = factor(loanData.clean$is_bad, levels = c(0, 1), labels = c("Good", "Bad"))
loanData.clean$loan_status = NULL
loanData.clean$revol_util <- str_replace_all(loanData.clean$revol_util, "[%]", "")
# Get rid of  the "%" symbol in the revol_util column.
loanData.clean$revol_util <- as.numeric(loanData.clean$revol_util)
# Convert the string data type of revol_util to numeric type.
loanData.clean$int_rate <- str_replace_all(loanData.clean$int_rate, "[%]", "")
loanData.clean$int_rate <- as.numeric(loanData.clean$int_rate)
corrMatrix1 = cor(loanData.clean[,c("loan_amnt","funded_amnt","funded_amnt_inv","int_rate","installment","annual_inc","dti","delinq_2yrs","inq_last_6mths","open_acc","pub_rec","revol_bal","revol_util",
"total_acc","out_prncp","out_prncp_inv","total_pymnt","total_pymnt_inv","total_rec_prncp","total_rec_int","total_rec_late_fee","recoveries", "collection_recovery_fee","last_pymnt_amnt" )])
corrplot(corrMatrix1,method = "circle",title="Correlation Matrix For All Continuous Predictors",tl.cex=0.5)
set.seed(1234)  #set seed to make the partition reproducible.
trng_ind = sample(seq_len(nrow(loanData.clean)),size=30000,replace=F)
loanData.trng = loanData.clean[trng_ind,]
loanData.test = loanData.clean[-trng_ind,]
prop.table(table(loanData.trng$is_bad))
prop.table(table(loanData.test$is_bad))
loanData.logModel.1 = glm(is_bad~.,data=loanData.trng,family=binomial())
summary(loanData.logModel.1)
modelChi.logModel.1 ; chidf.logModel.1; chisq.prob.logModel.1;
modelChi.logModel.1 = loanData.logModel.1$null.deviance - loanData.logModel.1$deviance
chidf.logModel.1 = loanData.logModel.1$df.null - loanData.logModel.1$df.residual
chisq.prob.logModel.1 = 1-pchisq(modelChi.logModel.1,chidf.logModel.1)
modelChi.logModel.1 ; chidf.logModel.1; chisq.prob.logModel.1;
loanData.logModel.2 = glm(is_bad~loan_amnt+funded_amnt+funded_amnt_inv+term+int_rate+installment+grade+sub_grade+emp_length+home_ownership+is_inc_v+pymnt_plan+addr_state+dti+delinq_2yrs+inq_last_6mths+open_acc+pub_rec+revol_bal+revol_util+total_acc+out_prncp+out_prncp_inv+total_pymnt_inv+total_rec_prncp+total_rec_int+total_rec_late_fee,data=loanData.trng,family=binomial())
summary(loanData.logModel.2)
modelChi.1and2 = loanData.logModel.2$deviance - loanData.logModel.1$deviance
chidf.1and2 = loanData.logModel.2$df.residual - loanData.logModel.1$df.residual
chisq.prob.1and2 = 1-pchisq(modelChi.1and2,chidf.1and2)
modelChi.1and2;chidf.1and2;chisq.prob.1and2
1.237404e-10 < 0.05
loanData.test$predictedProbabilities <- predict(loanData.logModel.1, newdata = loanData.test, type = "response")
head(loanData.test$predictedProbabilities)
nrow(loanData.test[loanData.test$predictedProbabilities>=0.5,])
loanData.test$prediction = ifelse(loanData.test$predictedProbabilities>=0.5,1,0)
CrossTable(loanData.test$is_bad, loanData.test$prediction, prop.chisq = FALSE, prop.c = FALSE, prop.r = FALSE, dnn = c('actual', 'predicted'))
library(C50)
CrossTable(loanData.test$is_bad, loanData.test$prediction, prop.chisq = FALSE, prop.c = FALSE, prop.r = FALSE, dnn = c('actual', 'predicted'))
table(loanData.test$is_bad)
table(loanData.test$prediction)
library(gmodels)
CrossTable(loanData.test$is_bad, loanData.test$prediction, prop.chisq = FALSE, prop.c = FALSE, prop.r = FALSE, dnn = c('actual', 'predicted'))
loanData.test$prediction = factor(loanData.test$prediction, levels = c(0, 1), labels = c("Good", "Bad"))
CrossTable(loanData.test$is_bad, loanData.test$prediction, prop.chisq = FALSE, prop.c = FALSE, prop.r = FALSE, dnn = c('actual', 'predicted'))
(7507+1113)/8661
1113/1152
write.csv(loanData.test,"loanData_test.csv")
temp = loanData.test[,-loanData.test$is_bad]
head(loanData.test)
temp =loanData.test[,-"loanData.test$is_bad"]
temp =loanData.test[,-"is_bad"]
temp =loanData.test[,-is_bad]
temp =loanData.test[,-loanData.test$is_bad]
temp = loanData.test[,-which(names(loanData.test) == "is_bad")]
loanData.test$predictedProbabilities <- predict(loanData.logModel.1, newdata = temp, type = "response")
loanData.test$prediction = ifelse(loanData.test$predictedProbabilities>=0.5,1,0)
loanData.test$prediction = factor(loanData.test$prediction, levels = c(0, 1), labels = c("Good", "Bad"))
CrossTable(loanData.test$is_bad, loanData.test$prediction, prop.chisq = FALSE, prop.c = FALSE, prop.r = FALSE, dnn = c('actual', 'predicted'))
loanData.test$predictedProbabilities <- predict(loanData.logModel.2, newdata = temp, type = "response")
loanData.test$prediction = ifelse(loanData.test$predictedProbabilities>=0.5,1,0)
loanData.test$prediction = factor(loanData.test$prediction, levels = c(0, 1), labels = c("Good", "Bad"))
CrossTable(loanData.test$is_bad, loanData.test$prediction, prop.chisq = FALSE, prop.c = FALSE, prop.r = FALSE, dnn = c('actual', 'predicted'))
loanData.test = loanData.test[,-which(names(loanData.test) == "predictedProbabilities")]
loanData.test = loanData.test[,-which(names(loanData.test) == "prediction")]
loanData.test$predictedProbabilities <- predict(loanData.logModel.1, newdata = loanData.test[,-which(names(loanData.test) == "is_bad")] , type = "response")
loanData.test$prediction = ifelse(loanData.test$predictedProbabilities>=0.5,1,0)
loanData.test$prediction = factor(loanData.test$prediction, levels = c(0, 1), labels = c("Good", "Bad"))
CrossTable(loanData.test$is_bad, loanData.test$prediction, prop.chisq = FALSE, prop.c = FALSE, prop.r = FALSE, dnn = c('actual', 'predicted'))
loanData.test$prediction = ifelse(loanData.test$predictedProbabilities>=0.9,1,0)
loanData.test$prediction = factor(loanData.test$prediction, levels = c(0, 1), labels = c("Good", "Bad"))
CrossTable(loanData.test$is_bad, loanData.test$prediction, prop.chisq = FALSE, prop.c = FALSE, prop.r = FALSE, dnn = c('actual', 'predicted'))
loanData.logModel.1 = glm(is_bad~.,data=loanData.trng,family=binomial(),control = list(maxit = 50))
