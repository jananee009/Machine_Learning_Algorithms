a = which(!complete.cases(x))
a
a = which(!complete.cases(loanData.clean))
a
type(a)
class(a)
sapply?
;
?sapply
a =as.vector(a)
b = sapply(a,function(x) sum(is.na(x)))
b = as.vector(b)
output = a + b
output
b
b = apply(a,1,function(x) sum(is.na(x)))
incompletecaseNumbers = which(!complete.cases(loanData.clean))
incompletecaseNumbers =as.vector(incompletecaseNumbers)
incompletecases = loanData.clean[incompletecaseNumbers,]
b = apply(incompletecases,1,function(x) sum(is.na(x)))
b
loanData.clean[39699,]
loanData.clean[39712,]
getMissingValues = function(x){
incompletecaseNumbers = which(!complete.cases(x)) # gives the row numbers of all the incomplete cases in the dataframe
incompletecaseNumbers =as.vector(incompletecaseNumbers)
incompletecases = x[incompletecaseNumbers,]
missingValuesCount = sapply(incompletecases,function(x) sum(is.na(x)))
return missingValuesCount
}
getMissingValues = function(x){
incompletecaseNumbers = which(!complete.cases(x))
incompletecaseNumbers =as.vector(incompletecaseNumbers)
incompletecases = x[incompletecaseNumbers,]
missingValuesCount = apply(incompletecases,1,function(x) sum(is.na(x)))
return missingValuesCount
}
getMissingValues = function(x){
incompletecaseNumbers = which(!complete.cases(x))
incompletecaseNumbers =as.vector(incompletecaseNumbers)
incompletecases = x[incompletecaseNumbers,]
missingValuesCount = apply(incompletecases,1,function(x) sum(is.na(x)))
return missingValuesCount }
getMissingValues = function(x){
incompletecaseNumbers = which(!complete.cases(x))
incompletecaseNumbers =as.vector(incompletecaseNumbers)
incompletecases = x[incompletecaseNumbers,]
missingValuesCount = apply(incompletecases,1,function(x) sum(is.na(x)))
return missingValuesCount }
getMissingValues = function(x){
incompletecaseNumbers = which(!complete.cases(x))
incompletecaseNumbers =as.vector(incompletecaseNumbers)
incompletecases = x[incompletecaseNumbers,]
missingValuesCount = apply(  incompletecases,1,function(x) sum(is.na(x))   )
return (missingValuesCount)
}
missingVal = getMissingValues(loanData.clean)
missingVal
dim(missingVal)
class(missingVal)
missingVal = as.vector(missingVal)
dim(missingVal)
missingVal = as.matrix(missingVal)
dim(missingVal)
missingVal[1,]
missingVal
missingVal = getMissingValues(loanData.clean)
missingVal
incompletecaseNumbers = which(!complete.cases(loanData.clean))
incompletecaseNumbers
incompletecaseNumbers =as.vector(incompletecaseNumbers)
incompletecases = x[incompletecaseNumbers,]
incompletecases = loanData.clean[incompletecaseNumbers,]
missingValuesCount = apply(  incompletecases,1,function(y) sum(is.na(y))   )
incompleteCaseCountdf =  data.frame(incompletecaseNumbers,missingValuesCount)
dim(incompleteCaseCountdf)
head(incompleteCaseCountdf)
incompleteCaseCountdf[order(-missingValuesCount)]
incompleteCaseCountdf[order(-missingValuesCount),]
incompleteCaseCountdfSorted =  incompleteCaseCountdf[order(-missingValuesCount)]
incompleteCaseCountdfSorted =  incompleteCaseCountdf[order(-missingValuesCount),]
dim(incompleteCaseCountdfSorted)
head(incompleteCaseCountdfSorted)
head(incompleteCaseCountdf)
incompletecaseNumbers
missingValuesCount = as.vector(missingValuesCount)
incompleteCaseCountdf =  data.frame(incompletecaseNumbers,missingValuesCount)
head(incompleteCaseCountdf)
incompleteCaseCountdf[order(-missingValuesCount)]
head(incompleteCaseCountdf[order(-missingValuesCount),])
getMissingValues = function(x){
incompletecaseNumbers = which(!complete.cases(x))
incompletecaseNumbers =as.vector(incompletecaseNumbers)
incompletecases = x[incompletecaseNumbers,]
missingValuesCount = apply(  incompletecases,1,function(y) sum(is.na(y))   )
missingValuesCount = as.vector(missingValuesCount)
incompleteCaseCountdf =  data.frame(incompletecaseNumbers,missingValuesCount)
incompleteCaseCountdfSorted =  incompleteCaseCountdf[order(-missingValuesCount),]
return (incompleteCaseCountdfSorted)
}
missingVal = getMissingValues(loanData.clean)
missingVal
head(missingVal)
loanData.clean = loanData.clean[-c(missingVal$incompletecaseNumbers),]
nrow(missingVal)
nrow(loanData.clean)
unique(loanData.clean[,"loan_status"])
?subset
loanData.clean.subset = loanData.clean[grep("Does not meet the credit policy.", loanData.clean$loan_Status), ]
head(loanData.clean.subset)
loanData.clean.subset
pmatch("med", c("mean", "median", "mode"))
a = pmatch("Does not meet the credit policy",loanData.clean$loan_status)
a
pmatch("Does not meet the credit policy",loanData.clean$loan_status)
bad_indicators <- c("Late (16-30 days)", "Late (31-120 days)", "Default", "Charged Off")
?pmatch()
a = pmatch("Does not meet the credit policy",as.vector(loanData.clean$loan_status))
a
Months = data.frame(Name = month.name, Number = 1:12)
Months
Months[grep("mb",Name)]
Months[grep("mb",Months$Name)]
Months[grep("mb",Months$Name), ]
Months[grep("mb",Name), ]
Months[grep("mb",Months$Name), ]
loanData.clean[grep("Does not meet the credit policy",loanData.clean$loan_status),]
head(loanData.clean[grep("Does not meet the credit policy",loanData.clean$loan_status),])
ambiguousLoanStatusRecords = loanData.clean[grep("Does not meet the credit policy",loanData.clean$loan_status),]
unique(loanData.clean[,"loan_status"])
nrow(ambiguousLoanStatusRecords)
head(ambiguousLoanStatusRecords)
temp = loanData.clean[-ambiguousLoanStatusRecords,]
subset(loanData.clean,grep("Does not meet the credit policy",loanData.clean$loan_status) )
temp = ,grep("Does not meet the credit policy",loanData.clean$loan_status) )
Error in s
temp = loanData.clean
nrow(temp)
temp1 = temp[!ambiguousLoanStatusRecords]
temp1 = temp[!ambiguousLoanStatusRecords,]
temp1 = temp - ambiguousLoanStatusRecords
?with()
temp[!temp %in% ambiguousLoanStatusRecords,]
nrow(temp)
temp1 = temp[!temp %in% ambiguousLoanStatusRecords,]
nrow(ambiguousLoanStatusRecords)
42390 - 2660
nrow(temp)
nrow(temp1)
temp1 = temp[!ambiguousLoanStatusRecords %in% temp,]
nrow(temp1)
ncol(temp1)
ncol(ambiguousLoanStatusRecords)
temp1 = temp[-grep("Does not meet the credit policy",temp$loan_status),]
nrow(temp1)
loanData.clean = loanData.clean[-grep("Does not meet the credit policy",loanData.clean$loan_status),]
nrow( loanData.clean)
summary(loanData.clean)
loanData.clean$purpose = NULL
summary(loanData.clean)
unique(loanData$loan_status)
unique(loanData.clean$loan_status)
bad_indicators <- c("Late (16-30 days)", "Late (31-120 days)", "Default", "Charged Off")
loanData.clean$is_bad = ifelse(loanData.clean$loan_status %in% bad_indicators,1,0)
head(loanData.clean)
str_replace_all(83.7%, "[%]", "")
str_replace_all("83.7%", "[%]", "")
str_replace("83.7%", "[%]", "")
library(stringr)
str_replace_all(83.7%, "[%]", "")
str_replace("83.7%", "[%]", "")
loanData.clean$issue_d <- as.Date(loanData.clean$issue_d)
unique(oanData.clean$issue_d)
unique(loanData.clean$issue_d)
loanData.clean$issue_d = as.Date(loanData.clean$issue_d)
which(!complete.cases(loanData.clean$issue_d))
which(!complete.cases(,loanData.clean$issue_d))
as.Date("Dec-2011")
type("Dec-2011")
class("Dec-2011")
?as.Date
library(lubridate)
package("lubridate")
install.packages("lubridate")
package("lubridate")
library(lubridate)
loanData.clean$issue_d = as.Date(loanData.clean$issue_d)
?lubridate
loanData.clean$issue_d <- as.Date(loanData.clean$issue_d)
loanData.clean$earliest_cr_line <- as.Date(loanData.clean$earliest_cr_line)
library("mlogit")
library(mlogit)
install.packages("mlogit")
library(mlogit)
library(car)
getwd()
setwd("/Users/jananee009/Zananee/Books/R/DiscoveringStatsUsingR")
eelData = read.delim("eel.dat",header=TRUE)
head(eelData)
summary(eelData)
eelData$Cured = relevel(eelData$Cured, "Not Cured")
?relevel
eelData$Intervention = relevel(eelData$Intervention, "No Treatment")
eelModel.1 = glm(Cured ~ Intervention,data=eelData,family=binomial())
?glm()
eelModel.2 = glm(Cured~.,data=eelData,family=binomial())
summary(eelModel.1)
modelChi = eelModel.1$null.deviance - eelModel.1$deviance
modelChi
eelModel.1$df.null
chidf = eelModel.1$df.null - eelModel.1$df.residual
chidf
?pchisq()
chisq.prob = 1-pchisq(modelChi,chidf)
chisq.prob
eelModel.1$coefficients
exp(eelModel.1$coefficients)
?exp
?confint()
exp(confint(eelModel.1))
eelModel.2
summary(eelModel.2)
anova(eelModel.1,eelModel.2)
modelChi = eelModel.1$deviance - eelModel.2$deviance
chidf = eelModel.1$df.residual - eelModel.2$df.residual
album2 = read.delim("Album Sales 2.dat",h=T)
albumSales.2 = lm(sales~adverts,data=album2)
head(album2)
albumSales.3 = lm(sales~.,data=album2)
summary(albumSales.3)
head(albumSales2)
head(album2)
eelData$predicted.probabilities = fitted(eelModel.1)
eelModel.1
summary(eelModel.1)
head(eelData)
eelData$residuals = resid(eelModel.1)
head(eelData)
summary(eelModel.1)
penaltyData = read.delim("penalty.dat",h=T)
head(penaltyData)
summary(penaltyData)
penaltyModel.1 = glm(Scored~PSWQ, data=penaltyData,family=binomial() )
penaltyModel.2 = glm(Scored~PSWQ+Previous, data=penaltyData,family=binomial() )
penaltyModel.3 = glm(Scored~PSWQ+Previous+Anxious, data=penaltyData,family=binomial() )
vif(penaltyModel.3)
summary(penaltyModel.2 )
summary(penaltyModel.3 )
cor(penaltyData[,c("Previous","PSWQ","Anxious")])
head(penaltyData)
penaltyData$logPSWQ = log(penaltyData$PSWQ)*penaltyData$PSWQ
penaltyData$logAnxious = log(penaltyData$Anxious)*penaltyData$Anxious
penaltyData$logPrevious = log(penaltyData$Previous+1)*penaltyData$Previous
penaltyData
head(penaltyData)
penaltyTest.1 = glm(Scored~.,data=penaltyData,family=binomial())
summary(penaltyTest.1)
chatData = read.delim("Chat-Up Lines.dat",h=T)
chatData = read.delim("Chat-Up Lines.dat",h=T)
head(chatData)
str(chatData)
summary(chatData)
is.factor(chatData$Gender)
chatData$Gender = relevel(chatData$Gender,"Male")
str(chatData)
mlChat = mlogit.data(chatData,choice="Success",shape="wide")
head(mlChat)
head(chatData)
chatModel = mlogit(Success ~ 1 | Good_Mate+Funny+Gender+Sex+Gender:Sex+Funny:Gender,data=mlChat,reflevel=3)
summary(chatModel)
burnoutData = read.delim("Burnout.dat",h=T)
burnoutData = read.delim("Burnout.dat",h=T)
head(burnoutData)
summary(burnoutData)
burnoutModel.1 = glm(burnout~`1,data=burnoutData,family=binomial())
;
)
fsdfsdfsdf
burnoutModel.1 = glm(burnout~1,data=burnoutData,family=binomial())
summary(burnoutModel.1)
burnoutData$burnout<-relevel(burnoutData$burnout, "Not Burnt Out")
head(burnoutData)
burnoutModel.1 = glm(burnout~loc+cope,data=burnoutData,family=binomial())
burnoutModel.2 = glm(burnout~loc+cope+teaching+research+pastoral,data=burnoutData,family=binomial())
summary(burnoutModel.1)
summary(burnoutModel.2)
modelChi = burnoutModel.1$null.deviance - burnoutModel.1$deviance
chidf = burnoutModel.1$df.null - burnoutModel.1$df.residual
chisq.prob = 1-pchisq(modelChi,chidf)
modelChi;chidf;chisq.prob
exp(burnoutModel.1$coefficients)
condomData = read.delim("condom.dat",h=T)
head(condomData)
summary(condomData)
str(condomData)
condomData$use = relevel(condomData$use,"Unprotected")
condomData$gender = relevel(condomData$gender,"Male")
condomData$previous = relevel(condomData$previous,"No Condom")
condomModel.1 = glm(use~gender+safety+perceive)
condomModel.1 = glm(use~gender+safety+perceive,data=condomData,family=binomial())
condomModel.2 = glm(use~.,data=condomData,family=binomial())
summary(condomModel.1)
summary(condomModel.2)
vif(condomModel.2)
getwd()
spiderWide = read.delim("SpiderWide.dat",h=T)
head(spiderWide)
spiderWide$pMean = mean(spiderWide$picture, spiderWide$real)
spiderWide$pMean =  (spiderWide$picture + spiderWide$real)/2
grandMean = mean(c(spiderWide$picture,spiderWide$real))
grandMean
spiderWide
spiderWide$adj = grandMean - spiderWide$pMean
spiderWide
spiderWide$picture_adj = spiderWide$picture - spiderWide$adj
spiderWide$real_adj = spiderWide$real - spiderWide$adj
spiderWide
chickFlick = read.delim("chickFlick.dat",h=T)
head(chickFlick)
bar = ggplot(chickFlick, aes(film,arousal))
library(ggplot)
library(ggplot2)
bar = ggplot(chickFlick, aes(film,arousal))
bar + stat_summary(fun.y=mean, geom="bar", fill="White", colour="Black")
bar + stat_summary(fun.y=mean, geom="bar", fill="White", colour="Black") + stat_summary(fun.data=mean_cl_normal,geom="pointrange") + labs(x="Film", y="Mean Arousal")
bar + stat_summary(fun.y=mean, geom="errorbar", fill="White", colour="Red") + stat_summary(fun.data=mean_cl_normal,geom="pointrange") + labs(x="Film", y="Mean Arousal")
bar = ggplot(chickFlick, aes(film,arousal,fill=gender))
bar+stat_summary(fun.y=mean, geom="bar", position = dodge)
bar+stat_summary(fun.y=mean, geom="bar", position = "dodge")
bar+stat_summary(fun.y=mean, geom="bar", position = "dodge")+ stat_summary(fun.data=mean_cl_normal, geom="errorbar", position=position_dodge(width=0.9),width=0.2)
chickFlick
summary(chickFlick)
chickFlick[,film="Memento"]
chickFlick[,chickFlick$film="Memento"]
chickFlick[chickFlick$film="Memento",]
chickFlick[chickFlick$film=="Memento",]
chickFlick[chickFlick$film=="Memento",chickFlick$arousal]
chickFlick[chickFlick$film=="Memento",'arousal']
mementoMean = mean(chickFlick[chickFlick$film=="Memento",'arousal'])
bjdMean = mean(chickFlick[chickFlick$film=="Bridget Jones' Diary",'arousal'])
mementoMean
bjdMean
?sd()
Mementosd = sd(chickFlick[chickFlick$film=="Memento",'arousal'])
mementoSD = sd(chickFlick[chickFlick$film=="Memento",'arousal'])
bjdSD = sd(chickFlick[chickFlick$film=="Bridget Jones' Diary",'arousal'])
mementoSE = mementoSD/sqrt(20)
bjdSE = bjdSD/sqrt(20)
mementoCI = mementoMean + (1.96*mementoSE)
mementoCI
mementoCIUL = mementoMean + (1.96*mementoSE)
mementoCILL = mementoMean - (1.96*mementoSE)
mementoCILL
chickFlick[chickFlick$film=="Memento",chickFlick$gender=="Male",'arousal'])
chickFlick[chickFlick$film=="Memento",chickFlick$gender=="Male",'arousal']
chickFlick[chickFlick$film=="Memento" & chickFlick$gender=="Male",'arousal']
mementoMaleMean = mean(chickFlick[chickFlick$film=="Memento" & chickFlick$gender=="Male",'arousal'])
mementoMaleSD = sd(chickFlick[chickFlick$film=="Memento" & chickFlick$gender=="Male",'arousal'])
mementoMaleSE = mementoMaleSD / sqrt(10)
mementoMaleCIUL = mementoMaleMean + (1.96*mementoMaleSE)
mementoMaleCIUL
mementoMaleCILL = mementoMaleMean - (1.96*mementoMaleSE)
mementoMaleCILL
mementoMaleMean
spiderLong = read.delim("spiderLong.dat",h=T)
head(spiderLong)
ind.t.test = t.test(Anxiety~Group,data=spiderLong,paired=FALSE)
ind.t.test
library(WRS)
install.packages("WRS")
install.packages("WRS",repos="http://R-Forge.R-Project.org")
install.packages("WRS",repos="http://R-Forge.R-project.org")
install.packages("WRS",repos="http://r-forge.r-project.org/")
?se()
spiderWide
sd(spiderWide$picture)/sqrt(12)
viagra = read.delim("Viagra.dat",h=T)
head(viagra)
summary(viagra)
sd(viagra$libido)
sd(viagra$libido)^2
log 1000
log(1000)
log10(1000)
exp(3)
exp(1000)
inv.logit(0.5)
library(boot)
inv.logit(0.5)
logit(0.5)
getwd()
wellData = read.delim("wells.dat",header=T)
head(wellData)
summary(wellData)
wellData = read.delim("wells.dat",header=T,sep=" ")
head(wellData)
0.62*0.48
0.61-0.2976
R.version()
R.Version()
R.home()
packageStatus()
R.home()
library(boot)
setwd( "/Users/jananee009/Zananee/Projects/Machine_Learning_Algorithms/Blood_Donations")
blood_don_train = read.csv("blood_donation_train.csv",header=TRUE)
blood_don_test = read.csv("blood_donation_test.csv",header=TRUE)
blood_don_train = rename(blood_don_train, c("Months.since.Last.Donation"="Months_since_Last_Donation", "Number.of.Donations"="Number_of_Donations", "Total.Volume.Donated..c.c.."="Total_Volume_Donated_cc", "Months.since.First.Donation"="Months_since_First_Donation", "Made.Donation.in.March.2007"="Made_Donation_in_March_2007"))
blood_don_test = rename(blood_don_test, c("Months.since.Last.Donation"="Months_since_Last_Donation", "Number.of.Donations"="Number_of_Donations", "Total.Volume.Donated..c.c.."="Total_Volume_Donated_cc", "Months.since.First.Donation"="Months_since_First_Donation"))
install.packages("plyr")
install.packages("plyr")
install.packages("plyr")
install.packages("plyr")
install.packages("plyr")
install.packages("plyr")
install.packages("plyr")
install.packages("plyr")
install.packages("plyr")
library(plyr)
blood_don_train = rename(blood_don_train, c("Months.since.Last.Donation"="Months_since_Last_Donation", "Number.of.Donations"="Number_of_Donations", "Total.Volume.Donated..c.c.."="Total_Volume_Donated_cc", "Months.since.First.Donation"="Months_since_First_Donation", "Made.Donation.in.March.2007"="Made_Donation_in_March_2007"))
blood_don_test = rename(blood_don_test, c("Months.since.Last.Donation"="Months_since_Last_Donation", "Number.of.Donations"="Number_of_Donations", "Total.Volume.Donated..c.c.."="Total_Volume_Donated_cc", "Months.since.First.Donation"="Months_since_First_Donation"))
blood_don_train$Made_Donation_in_March_2007 = factor(blood_don_train$Made_Donation_in_March_2007, levels = c(0, 1), labels = c("Not_Donated", "Donated"))
blood_don_train[blood_don_train$Months_since_Last_Donation>=60,]
blood_don_train[blood_don_train$Number_of_Donations>=40,]
blood_don_train_no_out = blood_don_train[-c(1,9,264,386,387,389,576),]
blood_don_model.0 = glm(Made_Donation_in_March_2007~Months_since_Last_Donation+Number_of_Donations+Months_since_First_Donation, data=blood_don_set.trng, family=binomial())
trng_ind = sample(seq_len(nrow(blood_don_train_no_out)),size=460,replace=F)
set.seed(123)
set.seed(12345)
trng_ind = sample(seq_len(nrow(blood_don_train_no_out)),size=450,replace=F)
blood_don_set.trng = blood_don_train_no_out[trng_ind,]
blood_don_set.test = blood_don_train_no_out[-trng_ind,]
prop.table(table(blood_don_set.trng$Made_Donation_in_March_2007))
prop.table(table(blood_don_set.test$Made_Donation_in_March_2007))
set.seed(12345)
trng_ind = sample(seq_len(nrow(blood_don_train_no_out)),size=460,replace=F)
blood_don_set.trng = blood_don_train_no_out[trng_ind,]
blood_don_set.test = blood_don_train_no_out[-trng_ind,]
prop.table(table(blood_don_set.trng$Made_Donation_in_March_2007))
prop.table(table(blood_don_set.test$Made_Donation_in_March_2007))
nrow(blood_don_set.trng)
blood_don_set.test$actual = 0
blood_don_set.test$actual[blood_don_set.test$Made_Donation_in_March_2007=="Donated"] = 1
bootstrapCoeff = data.frame(Intercept=numeric(0),Months_since_Last_Donation=numeric(0),Number_of_Donations=numeric(0),Months_since_First_Donation=numeric(0))
bootstrapStdErr= data.frame(Intercept=numeric(0),Months_since_Last_Donation=numeric(0),Number_of_Donations=numeric(0),Months_since_First_Donation=numeric(0))
bootstrapZValue = data.frame(Intercept=numeric(0),Months_since_Last_Donation=numeric(0),Number_of_Donations=numeric(0),Months_since_First_Donation=numeric(0))
bootstrapPValue = data.frame(Intercept=numeric(0),Months_since_Last_Donation=numeric(0),Number_of_Donations=numeric(0),Months_since_First_Donation=numeric(0))
for (i in 1:10000) {
indices = sample(1:450,replace=T)
d = blood_don_set.trng[indices,]
fit = glm(Made_Donation_in_March_2007~Months_since_Last_Donation+Number_of_Donations+Months_since_First_Donation, data=d, family=binomial())
# store all coefficient estimates in dataframe
bootstrapCoeff[i,"Intercept"] = coef(summary(fit))["(Intercept)","Estimate"]
bootstrapCoeff[i,"Months_since_Last_Donation"] = coef(summary(fit))["Months_since_Last_Donation","Estimate"]
bootstrapCoeff[i,"Number_of_Donations"] = coef(summary(fit))["Number_of_Donations","Estimate"]
bootstrapCoeff[i,"Months_since_First_Donation"] = coef(summary(fit))["Months_since_First_Donation","Estimate"]
# store all coefficient std errors in dataframe
bootstrapStdErr[i,"Intercept"] = coef(summary(fit))["(Intercept)","Std. Error"]
bootstrapStdErr[i,"Months_since_Last_Donation"] = coef(summary(fit))["Months_since_Last_Donation","Std. Error"]
bootstrapStdErr[i,"Number_of_Donations"] = coef(summary(fit))["Number_of_Donations","Std. Error"]
bootstrapStdErr[i,"Months_since_First_Donation"] = coef(summary(fit))["Months_since_First_Donation","Std. Error"]
# store all coefficient z values in dataframe
bootstrapZValue[i,"Intercept"] = coef(summary(fit))["(Intercept)","z value"]
bootstrapZValue[i,"Months_since_Last_Donation"] = coef(summary(fit))["Months_since_Last_Donation","z value"]
bootstrapZValue[i,"Number_of_Donations"] = coef(summary(fit))["Number_of_Donations","z value"]
bootstrapZValue[i,"Months_since_First_Donation"] = coef(summary(fit))["Months_since_First_Donation","z value"]
# store all coefficient p values in dataframe
bootstrapPValue[i,"Intercept"] = coef(summary(fit))["(Intercept)","Pr(>|z|)"]
bootstrapPValue[i,"Months_since_Last_Donation"] = coef(summary(fit))["Months_since_Last_Donation","Pr(>|z|)"]
bootstrapPValue[i,"Number_of_Donations"] = coef(summary(fit))["Number_of_Donations","Pr(>|z|)"]
bootstrapPValue[i,"Months_since_First_Donation"] = coef(summary(fit))["Months_since_First_Donation","Pr(>|z|)"]
}
dim(bootstrapCoeff)
head(bootstrapCoeff)
summary(bootstrapCoeff)
bootStrapIntercept = mean(bootstrapCoeff[,"Intercept"])
bootStrapIntercept
blood_don_model.0 = glm(Made_Donation_in_March_2007~Months_since_Last_Donation+Number_of_Donations+Months_since_First_Donation, data=blood_don_set.trng, family=binomial())
summary(blood_don_model.0)
blood_don_set.test$predictedProbabilities  = predict(blood_don_model.0, newdata = blood_don_set.test, type = "response")
blood_don_set.test$logLoss = ( blood_don_set.test$actual*log(blood_don_set.test$predictedProbabilities)) + ( (1-blood_don_set.test$actual)*log(1-blood_don_set.test$predictedProbabilities) )
logloss = mean(blood_don_set.test$logLoss)*(-1)
print(logloss)
head(blood_don_set.test)
for (j in 1:nrow(blood_don_set.test)) {
expValue = exp((bootStrapIntercept + (blood_don_set.test[j,"Months_since_Last_Donation"]*bootStrapMonths_since_Last_Donation) + (blood_don_set.test[j,"Number_of_Donations"]*bootStrapNumber_of_Donations) + (blood_don_set.test[j,"Months_since_First_Donation"]*bootStrapMonths_since_First_Donation))*(-1))
blood_don_set.test[j,"predictedProbabilities"] = 1/(1+expValue)
}
bootStrapIntercept = mean(bootstrapCoeff[,"Intercept"])
bootStrapMonths_since_Last_Donation = mean(bootstrapCoeff[,"Months_since_Last_Donation"])
bootStrapNumber_of_Donations = mean(bootstrapCoeff[,"Number_of_Donations"])
bootStrapMonths_since_First_Donation = mean(bootstrapCoeff[,"Months_since_First_Donation"])
for (j in 1:nrow(blood_don_set.test)) {
expValue = exp((bootStrapIntercept + (blood_don_set.test[j,"Months_since_Last_Donation"]*bootStrapMonths_since_Last_Donation) + (blood_don_set.test[j,"Number_of_Donations"]*bootStrapNumber_of_Donations) + (blood_don_set.test[j,"Months_since_First_Donation"]*bootStrapMonths_since_First_Donation))*(-1))
blood_don_set.test[j,"predictedProbabilities"] = 1/(1+expValue)
}
head(blood_don_set.test)
blood_don_set.test$logLoss = ( blood_don_set.test$actual*log(blood_don_set.test$predictedProbabilities)) + ( (1-blood_don_set.test$actual)*log(1-blood_don_set.test$predictedProbabilities) )
logloss = mean(blood_don_set.test$logLoss)*(-1)
print(logloss)
head(blood_don_test)
blood_don_test$predictedProbabilities = 0
head(blood_don_test)
for (k in 1:nrow(blood_don_test)) {
expValue = exp((bootStrapIntercept + (blood_don_test[k,"Months_since_Last_Donation"]*bootStrapMonths_since_Last_Donation) + (blood_don_test[k,"Number_of_Donations"]*bootStrapNumber_of_Donations) + (blood_don_test[k,"Months_since_First_Donation"]*bootStrapMonths_since_First_Donation))*(-1))
blood_don_test[k,"predictedProbabilities"] = 1/(1+expValue)
}
head(blood_don_test)
my_prediction_11 = blood_don_test[,c("X","predictedProbabilities")]
submission_format = read.csv("BloodDonationSubmissionFormat.csv", check.names=FALSE)
colnames(my_prediction_11) = colnames(submission_format)
write.csv(my_prediction_11, "my_prediction_11.csv", row.names=FALSE)
